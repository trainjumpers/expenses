2025-08-03T15:48:56.108+0530	[35mDEBUG[0m	parser/custom_parser.go:371	CustomParser.init: Registering CustomParser for BankTypeOthers
2025-08-03T15:48:56.108+0530	[34mINFO[0m	server/server.go:27	Starting server on port 5000
2025-08-03T15:48:56.108+0530	[35mDEBUG[0m	manager/postgres.go:38	Connecting to database
2025-08-03T15:48:56.110+0530	[35mDEBUG[0m	manager/postgres.go:43	Database connected successfully
2025-08-03T15:49:07.318+0530	[35mDEBUG[0m	middleware/auth.go:61	Request authenticated for user Id 29
2025-08-03T15:49:07.318+0530	[35mDEBUG[0m	middleware/auth.go:151	Injected created_by field with user ID 29 for POST request
2025-08-03T15:49:07.319+0530	[35mDEBUG[0m	controller/analytics_controller.go:263	Getting analytics summary for user with query: {TimeRange:month StartDate:<nil> EndDate:<nil> AccountIds:[] CategoryIds:[] CreatedBy:29}
2025-08-03T15:49:07.319+0530	[35mDEBUG[0m	manager/postgres.go:68	Fetching single row: 
		SELECT 
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as total_expenses,
			COALESCE(SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END), 0) as total_income,
			COALESCE(SUM(amount), 0) as net_amount,
			COUNT(*) as transaction_count,
			COALESCE(AVG(CASE WHEN amount < 0 THEN ABS(amount) ELSE NULL END), 0) as average_expense,
			COALESCE(AVG(CASE WHEN amount > 0 THEN amount ELSE NULL END), 0) as average_income
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3
	
2025-08-03T15:49:07.332+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			c.id,
			c.name,
			c.icon,
			COALESCE(SUM(CASE WHEN t.amount < 0 THEN ABS(t.amount) ELSE 0 END), 0) as amount,
			COUNT(t.id) as count
		FROM dev.categories c
		INNER JOIN dev.transaction_category_mapping tc ON c.id = tc.category_id
		INNER JOIN dev.transaction t ON tc.transaction_id = t.id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0
		GROUP BY c.id, c.name, c.icon
		ORDER BY amount DESC
	
2025-08-03T15:49:07.334+0530	[35mDEBUG[0m	manager/postgres.go:68	Fetching single row: 
		SELECT 
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as amount,
			COUNT(*) as count
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0 AND NOT EXISTS (
			SELECT 1 FROM dev.transaction_category_mapping tc WHERE tc.transaction_id = t.id
		)
	
2025-08-03T15:49:07.336+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			a.id,
			a.name,
			a.bank_type,
			COALESCE(SUM(CASE WHEN t.amount < 0 THEN ABS(t.amount) ELSE 0 END), 0) as amount,
			COUNT(t.id) as count
		FROM dev.account a
		INNER JOIN dev.transaction t ON a.id = t.account_id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0
		GROUP BY a.id, a.name, a.bank_type
		ORDER BY amount DESC
	
2025-08-03T15:49:07.337+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			t.id,
			t.name,
			ABS(t.amount) as amount,
			t.date,
			a.name as account_name,
			COALESCE(
				ARRAY_AGG(c.name ORDER BY c.name) FILTER (WHERE c.name IS NOT NULL),
				ARRAY[]::text[]
			) as categories
		FROM dev.transaction t
		INNER JOIN dev.account a ON t.account_id = a.id
		LEFT JOIN dev.transaction_category_mapping tc ON t.id = tc.transaction_id
		LEFT JOIN dev.categories c ON tc.category_id = c.id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0
		GROUP BY t.id, t.name, t.amount, t.date, a.name
		ORDER BY ABS(t.amount) DESC
		LIMIT $4
	
2025-08-03T15:49:07.339+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			t.id,
			t.name,
			t.amount,
			t.date,
			a.name as account_name,
			COALESCE(
				ARRAY_AGG(c.name ORDER BY c.name) FILTER (WHERE c.name IS NOT NULL),
				ARRAY[]::text[]
			) as categories
		FROM dev.transaction t
		INNER JOIN dev.account a ON t.account_id = a.id
		LEFT JOIN dev.transaction_category_mapping tc ON t.id = tc.transaction_id
		LEFT JOIN dev.categories c ON tc.category_id = c.id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount > 0
		GROUP BY t.id, t.name, t.amount, t.date, a.name
		ORDER BY t.amount DESC
		LIMIT $4
	
2025-08-03T15:49:07.341+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			DATE_TRUNC('month', t.date) as month,
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as amount,
			COUNT(*) as count
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3
		GROUP BY DATE_TRUNC('month', t.date)
		ORDER BY month
	
2025-08-03T15:49:07.342+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		WITH similar_transactions AS (
			SELECT 
				LOWER(TRIM(name)) as pattern,
				ROUND(ABS(amount)::numeric, 2) as rounded_amount,
				COUNT(*) as frequency,
				AVG(ABS(amount)) as avg_amount,
				ARRAY_AGG(id ORDER BY date) as transaction_ids,
				MIN(date) as first_date,
				MAX(date) as last_date
			FROM dev.transaction t
			WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND amount < 0
			GROUP BY LOWER(TRIM(name)), ROUND(ABS(amount)::numeric, 2)
			HAVING COUNT(*) >= 3
		)
		SELECT 
			pattern,
			avg_amount,
			frequency,
			transaction_ids,
			CASE 
				WHEN frequency >= 12 THEN 'monthly'
				WHEN frequency >= 4 THEN 'weekly'
				ELSE 'irregular'
			END as frequency_type,
			CASE 
				WHEN frequency >= 6 THEN 0.9
				WHEN frequency >= 4 THEN 0.7
				ELSE 0.5
			END as confidence
		FROM similar_transactions
		ORDER BY avg_amount DESC, frequency DESC
		LIMIT 20
	
2025-08-03T15:49:07.344+0530	[35mDEBUG[0m	controller/analytics_controller.go:272	Successfully retrieved analytics summary
[GIN] 2025/08/03 - 15:49:07 | 200 |   25.962188ms |             ::1 | POST     "/api/v1/analytics/summary"
2025-08-03T15:49:12.887+0530	[35mDEBUG[0m	middleware/auth.go:61	Request authenticated for user Id 29
2025-08-03T15:49:12.887+0530	[35mDEBUG[0m	middleware/auth.go:151	Injected created_by field with user ID 29 for POST request
2025-08-03T15:49:12.888+0530	[35mDEBUG[0m	controller/analytics_controller.go:263	Getting analytics summary for user with query: {TimeRange:month StartDate:<nil> EndDate:<nil> AccountIds:[] CategoryIds:[] CreatedBy:29}
2025-08-03T15:49:12.888+0530	[35mDEBUG[0m	manager/postgres.go:68	Fetching single row: 
		SELECT 
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as total_expenses,
			COALESCE(SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END), 0) as total_income,
			COALESCE(SUM(amount), 0) as net_amount,
			COUNT(*) as transaction_count,
			COALESCE(AVG(CASE WHEN amount < 0 THEN ABS(amount) ELSE NULL END), 0) as average_expense,
			COALESCE(AVG(CASE WHEN amount > 0 THEN amount ELSE NULL END), 0) as average_income
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3
	
2025-08-03T15:49:12.890+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			c.id,
			c.name,
			c.icon,
			COALESCE(SUM(CASE WHEN t.amount < 0 THEN ABS(t.amount) ELSE 0 END), 0) as amount,
			COUNT(t.id) as count
		FROM dev.categories c
		INNER JOIN dev.transaction_category_mapping tc ON c.id = tc.category_id
		INNER JOIN dev.transaction t ON tc.transaction_id = t.id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0
		GROUP BY c.id, c.name, c.icon
		ORDER BY amount DESC
	
2025-08-03T15:49:12.891+0530	[35mDEBUG[0m	manager/postgres.go:68	Fetching single row: 
		SELECT 
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as amount,
			COUNT(*) as count
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0 AND NOT EXISTS (
			SELECT 1 FROM dev.transaction_category_mapping tc WHERE tc.transaction_id = t.id
		)
	
2025-08-03T15:49:12.892+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			a.id,
			a.name,
			a.bank_type,
			COALESCE(SUM(CASE WHEN t.amount < 0 THEN ABS(t.amount) ELSE 0 END), 0) as amount,
			COUNT(t.id) as count
		FROM dev.account a
		INNER JOIN dev.transaction t ON a.id = t.account_id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0
		GROUP BY a.id, a.name, a.bank_type
		ORDER BY amount DESC
	
2025-08-03T15:49:12.893+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			t.id,
			t.name,
			ABS(t.amount) as amount,
			t.date,
			a.name as account_name,
			COALESCE(
				ARRAY_AGG(c.name ORDER BY c.name) FILTER (WHERE c.name IS NOT NULL),
				ARRAY[]::text[]
			) as categories
		FROM dev.transaction t
		INNER JOIN dev.account a ON t.account_id = a.id
		LEFT JOIN dev.transaction_category_mapping tc ON t.id = tc.transaction_id
		LEFT JOIN dev.categories c ON tc.category_id = c.id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0
		GROUP BY t.id, t.name, t.amount, t.date, a.name
		ORDER BY ABS(t.amount) DESC
		LIMIT $4
	
2025-08-03T15:49:12.894+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			t.id,
			t.name,
			t.amount,
			t.date,
			a.name as account_name,
			COALESCE(
				ARRAY_AGG(c.name ORDER BY c.name) FILTER (WHERE c.name IS NOT NULL),
				ARRAY[]::text[]
			) as categories
		FROM dev.transaction t
		INNER JOIN dev.account a ON t.account_id = a.id
		LEFT JOIN dev.transaction_category_mapping tc ON t.id = tc.transaction_id
		LEFT JOIN dev.categories c ON tc.category_id = c.id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount > 0
		GROUP BY t.id, t.name, t.amount, t.date, a.name
		ORDER BY t.amount DESC
		LIMIT $4
	
2025-08-03T15:49:12.895+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			DATE_TRUNC('month', t.date) as month,
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as amount,
			COUNT(*) as count
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3
		GROUP BY DATE_TRUNC('month', t.date)
		ORDER BY month
	
2025-08-03T15:49:12.895+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		WITH similar_transactions AS (
			SELECT 
				LOWER(TRIM(name)) as pattern,
				ROUND(ABS(amount)::numeric, 2) as rounded_amount,
				COUNT(*) as frequency,
				AVG(ABS(amount)) as avg_amount,
				ARRAY_AGG(id ORDER BY date) as transaction_ids,
				MIN(date) as first_date,
				MAX(date) as last_date
			FROM dev.transaction t
			WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND amount < 0
			GROUP BY LOWER(TRIM(name)), ROUND(ABS(amount)::numeric, 2)
			HAVING COUNT(*) >= 3
		)
		SELECT 
			pattern,
			avg_amount,
			frequency,
			transaction_ids,
			CASE 
				WHEN frequency >= 12 THEN 'monthly'
				WHEN frequency >= 4 THEN 'weekly'
				ELSE 'irregular'
			END as frequency_type,
			CASE 
				WHEN frequency >= 6 THEN 0.9
				WHEN frequency >= 4 THEN 0.7
				ELSE 0.5
			END as confidence
		FROM similar_transactions
		ORDER BY avg_amount DESC, frequency DESC
		LIMIT 20
	
2025-08-03T15:49:12.896+0530	[35mDEBUG[0m	controller/analytics_controller.go:272	Successfully retrieved analytics summary
[GIN] 2025/08/03 - 15:49:12 | 200 |     8.70688ms |             ::1 | POST     "/api/v1/analytics/summary"
2025-08-03T15:49:21.561+0530	[35mDEBUG[0m	middleware/auth.go:61	Request authenticated for user Id 29
2025-08-03T15:49:21.561+0530	[35mDEBUG[0m	middleware/auth.go:151	Injected created_by field with user ID 29 for POST request
2025-08-03T15:49:21.561+0530	[35mDEBUG[0m	controller/analytics_controller.go:263	Getting analytics summary for user with query: {TimeRange:month StartDate:<nil> EndDate:<nil> AccountIds:[] CategoryIds:[] CreatedBy:29}
2025-08-03T15:49:21.561+0530	[35mDEBUG[0m	manager/postgres.go:68	Fetching single row: 
		SELECT 
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as total_expenses,
			COALESCE(SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END), 0) as total_income,
			COALESCE(SUM(amount), 0) as net_amount,
			COUNT(*) as transaction_count,
			COALESCE(AVG(CASE WHEN amount < 0 THEN ABS(amount) ELSE NULL END), 0) as average_expense,
			COALESCE(AVG(CASE WHEN amount > 0 THEN amount ELSE NULL END), 0) as average_income
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3
	
2025-08-03T15:49:21.563+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			c.id,
			c.name,
			c.icon,
			COALESCE(SUM(CASE WHEN t.amount < 0 THEN ABS(t.amount) ELSE 0 END), 0) as amount,
			COUNT(t.id) as count
		FROM dev.categories c
		INNER JOIN dev.transaction_category_mapping tc ON c.id = tc.category_id
		INNER JOIN dev.transaction t ON tc.transaction_id = t.id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0
		GROUP BY c.id, c.name, c.icon
		ORDER BY amount DESC
	
2025-08-03T15:49:21.564+0530	[35mDEBUG[0m	manager/postgres.go:68	Fetching single row: 
		SELECT 
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as amount,
			COUNT(*) as count
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0 AND NOT EXISTS (
			SELECT 1 FROM dev.transaction_category_mapping tc WHERE tc.transaction_id = t.id
		)
	
2025-08-03T15:49:21.565+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			a.id,
			a.name,
			a.bank_type,
			COALESCE(SUM(CASE WHEN t.amount < 0 THEN ABS(t.amount) ELSE 0 END), 0) as amount,
			COUNT(t.id) as count
		FROM dev.account a
		INNER JOIN dev.transaction t ON a.id = t.account_id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0
		GROUP BY a.id, a.name, a.bank_type
		ORDER BY amount DESC
	
2025-08-03T15:49:21.566+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			t.id,
			t.name,
			ABS(t.amount) as amount,
			t.date,
			a.name as account_name,
			COALESCE(
				ARRAY_AGG(c.name ORDER BY c.name) FILTER (WHERE c.name IS NOT NULL),
				ARRAY[]::text[]
			) as categories
		FROM dev.transaction t
		INNER JOIN dev.account a ON t.account_id = a.id
		LEFT JOIN dev.transaction_category_mapping tc ON t.id = tc.transaction_id
		LEFT JOIN dev.categories c ON tc.category_id = c.id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0
		GROUP BY t.id, t.name, t.amount, t.date, a.name
		ORDER BY ABS(t.amount) DESC
		LIMIT $4
	
2025-08-03T15:49:21.567+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			t.id,
			t.name,
			t.amount,
			t.date,
			a.name as account_name,
			COALESCE(
				ARRAY_AGG(c.name ORDER BY c.name) FILTER (WHERE c.name IS NOT NULL),
				ARRAY[]::text[]
			) as categories
		FROM dev.transaction t
		INNER JOIN dev.account a ON t.account_id = a.id
		LEFT JOIN dev.transaction_category_mapping tc ON t.id = tc.transaction_id
		LEFT JOIN dev.categories c ON tc.category_id = c.id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount > 0
		GROUP BY t.id, t.name, t.amount, t.date, a.name
		ORDER BY t.amount DESC
		LIMIT $4
	
2025-08-03T15:49:21.569+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			DATE_TRUNC('month', t.date) as month,
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as amount,
			COUNT(*) as count
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3
		GROUP BY DATE_TRUNC('month', t.date)
		ORDER BY month
	
2025-08-03T15:49:21.569+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		WITH similar_transactions AS (
			SELECT 
				LOWER(TRIM(name)) as pattern,
				ROUND(ABS(amount)::numeric, 2) as rounded_amount,
				COUNT(*) as frequency,
				AVG(ABS(amount)) as avg_amount,
				ARRAY_AGG(id ORDER BY date) as transaction_ids,
				MIN(date) as first_date,
				MAX(date) as last_date
			FROM dev.transaction t
			WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND amount < 0
			GROUP BY LOWER(TRIM(name)), ROUND(ABS(amount)::numeric, 2)
			HAVING COUNT(*) >= 3
		)
		SELECT 
			pattern,
			avg_amount,
			frequency,
			transaction_ids,
			CASE 
				WHEN frequency >= 12 THEN 'monthly'
				WHEN frequency >= 4 THEN 'weekly'
				ELSE 'irregular'
			END as frequency_type,
			CASE 
				WHEN frequency >= 6 THEN 0.9
				WHEN frequency >= 4 THEN 0.7
				ELSE 0.5
			END as confidence
		FROM similar_transactions
		ORDER BY avg_amount DESC, frequency DESC
		LIMIT 20
	
2025-08-03T15:49:21.570+0530	[35mDEBUG[0m	controller/analytics_controller.go:272	Successfully retrieved analytics summary
[GIN] 2025/08/03 - 15:49:21 | 200 |    9.580854ms |             ::1 | POST     "/api/v1/analytics/summary"
2025-08-03T15:49:31.294+0530	[35mDEBUG[0m	middleware/auth.go:61	Request authenticated for user Id 29
2025-08-03T15:49:31.294+0530	[35mDEBUG[0m	middleware/auth.go:151	Injected created_by field with user ID 29 for POST request
2025-08-03T15:49:31.294+0530	[35mDEBUG[0m	controller/analytics_controller.go:263	Getting analytics summary for user with query: {TimeRange:month StartDate:<nil> EndDate:<nil> AccountIds:[] CategoryIds:[] CreatedBy:29}
2025-08-03T15:49:31.294+0530	[35mDEBUG[0m	manager/postgres.go:68	Fetching single row: 
		SELECT 
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as total_expenses,
			COALESCE(SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END), 0) as total_income,
			COALESCE(SUM(amount), 0) as net_amount,
			COUNT(*) as transaction_count,
			COALESCE(AVG(CASE WHEN amount < 0 THEN ABS(amount) ELSE NULL END), 0) as average_expense,
			COALESCE(AVG(CASE WHEN amount > 0 THEN amount ELSE NULL END), 0) as average_income
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3
	
2025-08-03T15:49:31.296+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			c.id,
			c.name,
			c.icon,
			COALESCE(SUM(CASE WHEN t.amount < 0 THEN ABS(t.amount) ELSE 0 END), 0) as amount,
			COUNT(t.id) as count
		FROM dev.categories c
		INNER JOIN dev.transaction_category_mapping tc ON c.id = tc.category_id
		INNER JOIN dev.transaction t ON tc.transaction_id = t.id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0
		GROUP BY c.id, c.name, c.icon
		ORDER BY amount DESC
	
2025-08-03T15:49:31.297+0530	[35mDEBUG[0m	manager/postgres.go:68	Fetching single row: 
		SELECT 
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as amount,
			COUNT(*) as count
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0 AND NOT EXISTS (
			SELECT 1 FROM dev.transaction_category_mapping tc WHERE tc.transaction_id = t.id
		)
	
2025-08-03T15:49:31.298+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			a.id,
			a.name,
			a.bank_type,
			COALESCE(SUM(CASE WHEN t.amount < 0 THEN ABS(t.amount) ELSE 0 END), 0) as amount,
			COUNT(t.id) as count
		FROM dev.account a
		INNER JOIN dev.transaction t ON a.id = t.account_id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0
		GROUP BY a.id, a.name, a.bank_type
		ORDER BY amount DESC
	
2025-08-03T15:49:31.299+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			t.id,
			t.name,
			ABS(t.amount) as amount,
			t.date,
			a.name as account_name,
			COALESCE(
				ARRAY_AGG(c.name ORDER BY c.name) FILTER (WHERE c.name IS NOT NULL),
				ARRAY[]::text[]
			) as categories
		FROM dev.transaction t
		INNER JOIN dev.account a ON t.account_id = a.id
		LEFT JOIN dev.transaction_category_mapping tc ON t.id = tc.transaction_id
		LEFT JOIN dev.categories c ON tc.category_id = c.id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0
		GROUP BY t.id, t.name, t.amount, t.date, a.name
		ORDER BY ABS(t.amount) DESC
		LIMIT $4
	
2025-08-03T15:49:31.300+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			t.id,
			t.name,
			t.amount,
			t.date,
			a.name as account_name,
			COALESCE(
				ARRAY_AGG(c.name ORDER BY c.name) FILTER (WHERE c.name IS NOT NULL),
				ARRAY[]::text[]
			) as categories
		FROM dev.transaction t
		INNER JOIN dev.account a ON t.account_id = a.id
		LEFT JOIN dev.transaction_category_mapping tc ON t.id = tc.transaction_id
		LEFT JOIN dev.categories c ON tc.category_id = c.id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount > 0
		GROUP BY t.id, t.name, t.amount, t.date, a.name
		ORDER BY t.amount DESC
		LIMIT $4
	
2025-08-03T15:49:31.301+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			DATE_TRUNC('month', t.date) as month,
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as amount,
			COUNT(*) as count
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3
		GROUP BY DATE_TRUNC('month', t.date)
		ORDER BY month
	
2025-08-03T15:49:31.302+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		WITH similar_transactions AS (
			SELECT 
				LOWER(TRIM(name)) as pattern,
				ROUND(ABS(amount)::numeric, 2) as rounded_amount,
				COUNT(*) as frequency,
				AVG(ABS(amount)) as avg_amount,
				ARRAY_AGG(id ORDER BY date) as transaction_ids,
				MIN(date) as first_date,
				MAX(date) as last_date
			FROM dev.transaction t
			WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND amount < 0
			GROUP BY LOWER(TRIM(name)), ROUND(ABS(amount)::numeric, 2)
			HAVING COUNT(*) >= 3
		)
		SELECT 
			pattern,
			avg_amount,
			frequency,
			transaction_ids,
			CASE 
				WHEN frequency >= 12 THEN 'monthly'
				WHEN frequency >= 4 THEN 'weekly'
				ELSE 'irregular'
			END as frequency_type,
			CASE 
				WHEN frequency >= 6 THEN 0.9
				WHEN frequency >= 4 THEN 0.7
				ELSE 0.5
			END as confidence
		FROM similar_transactions
		ORDER BY avg_amount DESC, frequency DESC
		LIMIT 20
	
2025-08-03T15:49:31.303+0530	[35mDEBUG[0m	controller/analytics_controller.go:272	Successfully retrieved analytics summary
[GIN] 2025/08/03 - 15:49:31 | 200 |    9.172426ms |             ::1 | POST     "/api/v1/analytics/summary"
2025-08-03T15:49:37.228+0530	[35mDEBUG[0m	middleware/auth.go:61	Request authenticated for user Id 29
2025-08-03T15:49:37.228+0530	[35mDEBUG[0m	middleware/auth.go:151	Injected created_by field with user ID 29 for POST request
2025-08-03T15:49:37.228+0530	[35mDEBUG[0m	controller/analytics_controller.go:263	Getting analytics summary for user with query: {TimeRange:month StartDate:<nil> EndDate:<nil> AccountIds:[] CategoryIds:[] CreatedBy:29}
2025-08-03T15:49:37.228+0530	[35mDEBUG[0m	manager/postgres.go:68	Fetching single row: 
		SELECT 
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as total_expenses,
			COALESCE(SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END), 0) as total_income,
			COALESCE(SUM(amount), 0) as net_amount,
			COUNT(*) as transaction_count,
			COALESCE(AVG(CASE WHEN amount < 0 THEN ABS(amount) ELSE NULL END), 0) as average_expense,
			COALESCE(AVG(CASE WHEN amount > 0 THEN amount ELSE NULL END), 0) as average_income
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3
	
2025-08-03T15:49:37.230+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			c.id,
			c.name,
			c.icon,
			COALESCE(SUM(CASE WHEN t.amount < 0 THEN ABS(t.amount) ELSE 0 END), 0) as amount,
			COUNT(t.id) as count
		FROM dev.categories c
		INNER JOIN dev.transaction_category_mapping tc ON c.id = tc.category_id
		INNER JOIN dev.transaction t ON tc.transaction_id = t.id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0
		GROUP BY c.id, c.name, c.icon
		ORDER BY amount DESC
	
2025-08-03T15:49:37.232+0530	[35mDEBUG[0m	manager/postgres.go:68	Fetching single row: 
		SELECT 
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as amount,
			COUNT(*) as count
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0 AND NOT EXISTS (
			SELECT 1 FROM dev.transaction_category_mapping tc WHERE tc.transaction_id = t.id
		)
	
2025-08-03T15:49:37.232+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			a.id,
			a.name,
			a.bank_type,
			COALESCE(SUM(CASE WHEN t.amount < 0 THEN ABS(t.amount) ELSE 0 END), 0) as amount,
			COUNT(t.id) as count
		FROM dev.account a
		INNER JOIN dev.transaction t ON a.id = t.account_id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0
		GROUP BY a.id, a.name, a.bank_type
		ORDER BY amount DESC
	
2025-08-03T15:49:37.233+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			t.id,
			t.name,
			ABS(t.amount) as amount,
			t.date,
			a.name as account_name,
			COALESCE(
				ARRAY_AGG(c.name ORDER BY c.name) FILTER (WHERE c.name IS NOT NULL),
				ARRAY[]::text[]
			) as categories
		FROM dev.transaction t
		INNER JOIN dev.account a ON t.account_id = a.id
		LEFT JOIN dev.transaction_category_mapping tc ON t.id = tc.transaction_id
		LEFT JOIN dev.categories c ON tc.category_id = c.id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0
		GROUP BY t.id, t.name, t.amount, t.date, a.name
		ORDER BY ABS(t.amount) DESC
		LIMIT $4
	
2025-08-03T15:49:37.234+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			t.id,
			t.name,
			t.amount,
			t.date,
			a.name as account_name,
			COALESCE(
				ARRAY_AGG(c.name ORDER BY c.name) FILTER (WHERE c.name IS NOT NULL),
				ARRAY[]::text[]
			) as categories
		FROM dev.transaction t
		INNER JOIN dev.account a ON t.account_id = a.id
		LEFT JOIN dev.transaction_category_mapping tc ON t.id = tc.transaction_id
		LEFT JOIN dev.categories c ON tc.category_id = c.id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount > 0
		GROUP BY t.id, t.name, t.amount, t.date, a.name
		ORDER BY t.amount DESC
		LIMIT $4
	
2025-08-03T15:49:37.235+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			DATE_TRUNC('month', t.date) as month,
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as amount,
			COUNT(*) as count
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3
		GROUP BY DATE_TRUNC('month', t.date)
		ORDER BY month
	
2025-08-03T15:49:37.236+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		WITH similar_transactions AS (
			SELECT 
				LOWER(TRIM(name)) as pattern,
				ROUND(ABS(amount)::numeric, 2) as rounded_amount,
				COUNT(*) as frequency,
				AVG(ABS(amount)) as avg_amount,
				ARRAY_AGG(id ORDER BY date) as transaction_ids,
				MIN(date) as first_date,
				MAX(date) as last_date
			FROM dev.transaction t
			WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND amount < 0
			GROUP BY LOWER(TRIM(name)), ROUND(ABS(amount)::numeric, 2)
			HAVING COUNT(*) >= 3
		)
		SELECT 
			pattern,
			avg_amount,
			frequency,
			transaction_ids,
			CASE 
				WHEN frequency >= 12 THEN 'monthly'
				WHEN frequency >= 4 THEN 'weekly'
				ELSE 'irregular'
			END as frequency_type,
			CASE 
				WHEN frequency >= 6 THEN 0.9
				WHEN frequency >= 4 THEN 0.7
				ELSE 0.5
			END as confidence
		FROM similar_transactions
		ORDER BY avg_amount DESC, frequency DESC
		LIMIT 20
	
2025-08-03T15:49:37.237+0530	[35mDEBUG[0m	controller/analytics_controller.go:272	Successfully retrieved analytics summary
[GIN] 2025/08/03 - 15:49:37 | 200 |    8.720865ms |             ::1 | POST     "/api/v1/analytics/summary"
2025-08-03T15:49:42.773+0530	[35mDEBUG[0m	middleware/auth.go:61	Request authenticated for user Id 29
2025-08-03T15:49:42.773+0530	[35mDEBUG[0m	middleware/auth.go:151	Injected created_by field with user ID 29 for POST request
2025-08-03T15:49:42.773+0530	[35mDEBUG[0m	controller/analytics_controller.go:73	Getting category spending for user with query: {TimeRange:month StartDate:<nil> EndDate:<nil> AccountIds:[] CategoryIds:[] CreatedBy:29}
2025-08-03T15:49:42.773+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			c.id,
			c.name,
			c.icon,
			COALESCE(SUM(CASE WHEN t.amount < 0 THEN ABS(t.amount) ELSE 0 END), 0) as amount,
			COUNT(t.id) as count
		FROM dev.categories c
		INNER JOIN dev.transaction_category_mapping tc ON c.id = tc.category_id
		INNER JOIN dev.transaction t ON tc.transaction_id = t.id
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0
		GROUP BY c.id, c.name, c.icon
		ORDER BY amount DESC
	
2025-08-03T15:49:42.775+0530	[35mDEBUG[0m	manager/postgres.go:68	Fetching single row: 
		SELECT 
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as amount,
			COUNT(*) as count
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3 AND t.amount < 0 AND NOT EXISTS (
			SELECT 1 FROM dev.transaction_category_mapping tc WHERE tc.transaction_id = t.id
		)
	
2025-08-03T15:49:42.776+0530	[35mDEBUG[0m	controller/analytics_controller.go:82	Successfully retrieved category spending
[GIN] 2025/08/03 - 15:49:42 | 200 |    3.420628ms |             ::1 | POST     "/api/v1/analytics/categories"
2025-08-03T15:49:52.788+0530	[35mDEBUG[0m	middleware/auth.go:61	Request authenticated for user Id 29
2025-08-03T15:49:52.788+0530	[35mDEBUG[0m	middleware/auth.go:151	Injected created_by field with user ID 29 for POST request
2025-08-03T15:49:52.788+0530	[35mDEBUG[0m	controller/analytics_controller.go:105	Getting spending trends for user with query: {TimeRange:month StartDate:<nil> EndDate:<nil> AccountIds:[] CategoryIds:[] CreatedBy:29}, granularity: daily
2025-08-03T15:49:52.788+0530	[35mDEBUG[0m	manager/postgres.go:74	Fetching multiple rows: 
		SELECT 
			DATE_TRUNC('day', t.date) as period_date,
			COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as expenses,
			COALESCE(SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END), 0) as income,
			COALESCE(SUM(amount), 0) as net_amount,
			COUNT(*) as count
		FROM dev.transaction t
		WHERE t.created_by = $1 AND t.date >= $2 AND t.date <= $3
		GROUP BY DATE_TRUNC('day', t.date)
		ORDER BY period_date
	
2025-08-03T15:49:52.790+0530	[35mDEBUG[0m	controller/analytics_controller.go:114	Successfully retrieved spending trends
[GIN] 2025/08/03 - 15:49:52 | 200 |    2.517967ms |             ::1 | POST     "/api/v1/analytics/trends"
signal: killed
