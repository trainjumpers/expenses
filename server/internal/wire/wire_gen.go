// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"expenses/internal/api"
	"expenses/internal/api/controller"
	"expenses/internal/database/postgres"
	"expenses/internal/repository"
	"expenses/internal/service"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeApplication() (*Provider, error) {
	databaseManager, err := database.NewDatabaseManager()
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(databaseManager)
	userService := service.NewUserService(userRepository)
	authService := service.NewAuthService(userService)
	engine := api.Init(authService, userService)
	provider := NewProvider(engine, databaseManager)
	return provider, nil
}

// wire.go:

type Provider struct {
	Handler   *gin.Engine
	dbManager *database.DatabaseManager
}

// Close all connections app makes in various places
func (p *Provider) Close() error {
	return p.dbManager.Close()
}

func NewProvider(handler *gin.Engine, dbManager *database.DatabaseManager) *Provider {
	return &Provider{
		Handler:   handler,
		dbManager: dbManager,
	}
}

var ProviderSet = wire.NewSet(
	NewProvider, database.NewDatabaseManager, api.Init, controllerSet,
	repositorySet,
	serviceSet,
)

var controllerSet = wire.NewSet(controller.NewAuthController)

var repositorySet = wire.NewSet(repository.NewUserRepository, wire.Bind(new(repository.UserRepositoryInterface), new(*repository.UserRepository)))

var serviceSet = wire.NewSet(service.NewUserService, service.NewAuthService)
