// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"expenses/internal/api"
	"expenses/internal/api/controller"
	"expenses/internal/config"
	"expenses/internal/repository"
	"expenses/internal/service"
	"expenses/internal/validator"
	"expenses/pkg/database/manager"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeApplication() (*Provider, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	v, err := manager.NewDatabaseManager(configConfig)
	if err != nil {
		return nil, err
	}
	userRepositoryInterface := repository.NewUserRepository(v, configConfig)
	userServiceInterface := service.NewUserService(userRepositoryInterface)
	authServiceInterface := service.NewAuthService(userServiceInterface, configConfig)
	accountRepositoryInterface := repository.NewAccountRepository(v, configConfig)
	accountServiceInterface := service.NewAccountService(accountRepositoryInterface)
	categoryRepositoryInterface := repository.NewCategoryRepository(v, configConfig)
	categoryServiceInterface := service.NewCategoryService(categoryRepositoryInterface)
	transactionRepositoryInterface := repository.NewTransactionRepository(v, configConfig)
	transactionServiceInterface := service.NewTransactionService(transactionRepositoryInterface, categoryRepositoryInterface, accountRepositoryInterface, v)
	ruleRepositoryInterface := repository.NewRuleRepository(v, configConfig)
	ruleServiceInterface := service.NewRuleService(ruleRepositoryInterface, transactionRepositoryInterface, v)
	ruleEngineServiceInterface := service.NewRuleEngineService(ruleRepositoryInterface, transactionRepositoryInterface, categoryRepositoryInterface)
	statementRepositoryInterface := repository.NewStatementRepository(v, configConfig)
	statementValidator := validator.NewStatementValidator()
	statementServiceInterface := service.NewStatementService(statementRepositoryInterface, accountServiceInterface, statementValidator, transactionServiceInterface)
	engine := api.Init(configConfig, authServiceInterface, userServiceInterface, accountServiceInterface, categoryServiceInterface, transactionServiceInterface, ruleServiceInterface, ruleEngineServiceInterface, statementServiceInterface)
	provider := NewProvider(engine, v)
	return provider, nil
}

// wire.go:

type Provider struct {
	Handler   *gin.Engine
	dbManager manager.DatabaseManager
}

// Close all connections app makes in various places
func (p *Provider) Close() error {
	return p.dbManager.Close()
}

func NewProvider(handler *gin.Engine, dbManager manager.DatabaseManager) *Provider {
	return &Provider{
		Handler:   handler,
		dbManager: dbManager,
	}
}

var ProviderSet = wire.NewSet(
	NewProvider, manager.NewDatabaseManager, config.NewConfig, api.Init, controllerSet,
	repositorySet,
	serviceSet,
	validatorSet,
)

var controllerSet = wire.NewSet(controller.NewAccountController, controller.NewAuthController, controller.NewCategoryController, controller.NewRuleController, controller.NewStatementController, controller.NewTransactionController)

var repositorySet = wire.NewSet(repository.NewAccountRepository, repository.NewCategoryRepository, repository.NewRuleRepository, repository.NewStatementRepository, repository.NewTransactionRepository, repository.NewUserRepository)

var serviceSet = wire.NewSet(service.NewAccountService, service.NewAuthService, service.NewCategoryService, service.NewRuleEngineService, service.NewRuleService, service.NewStatementService, service.NewTransactionService, service.NewUserService)

var validatorSet = wire.NewSet(validator.NewStatementValidator)
